#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include "DHT.h"
#include <FastBot.h>

#include <Hash.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
struct Configuration {
  const char* ssid;      // SSID Wi-Fi —Å–µ—Ç–∏
  const char* password;  // –ü–∞—Ä–æ–ª—å Wi-Fi —Å–µ—Ç–∏
  int DHTPin;            // –ü–∏–Ω –¥–ª—è DHT –¥–∞—Ç—á–∏–∫–∞
  int maxTemp;           // –ü–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
};

// –ó–∞–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
Configuration config = {
  "NAME_SSID",  // SSID
  "PASSWORD",   // –ø–∞—Ä–æ–ª—å
  D1,           // –ø–∏–Ω –¥–ª—è DHT
  30,           // –ø–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
};


// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫ –Ω–∏–∂–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π –¥–∞—Ç—á–∏–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ!
// #define DHTTYPE DHT11  // DHT 11
//#define DHTTYPE DHT21   // DHT 21 (AM2301)
#define DHTTYPE DHT22  // DHT 22  (AM2302), AM2321


// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ WEB-–∞–¥—Ä–µ—Å–∞.
const char* www_username = "username";
const char* www_password = "password";


// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ CreateAsync –Ω–∞ –ø–æ—Ä—Ç—É 80
AsyncWebServer server(80);

// –¥–∞—Ç—á–∏–∫ DHT
DHT dht(config.DHTPin, DHTTYPE);

// —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –≤ —Ü–∏–∫–ª–µ loop()
float t = 0.0;
float h = 0.0;

// –∏–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
int temp;
int maxTemp = config.maxTemp;  // –ø–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ void criticalTemp().
const unsigned long TEMP_MTBS = 120000;
unsigned long temp_lasttime;
bool isCriticalMessageSent = false;
unsigned long lastCriticalMessageTime = 0;
const unsigned long CRITICAL_MESSAGE_INTERVAL = 120000;  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –º–∏–Ω—É—Ç—ã)

unsigned long startTime = 0;  // –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã


// –ó–Ω–∞—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ int
unsigned long previousMillis = 0;  // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DHT


// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è DHT –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
const long interval = 10000;


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram BOT
#define BOT_TOKEN "token"  // —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
FastBot bot(BOT_TOKEN);


const char* www_realm = "ESP8266_TS";


// HTML
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta charset="UTF-8">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <style>
    html {
      font-family: Arial;
      display: inline-block;
      margin: 0px auto;
      text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .dht-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>
<body>
  <h2>ESP8266 TS</h2>
  <p>
    <i class="fas fa-thermometer-half" style="color:#0cc1a9;"></i> 
    <span class="dht-labels">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </span> 
    <span id="temperature">%TEMPERATURE%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <i class="fas fa-tint" style="color:#29bee1;"></i> 
    <span class="dht-labels">–í–ª–∞–∂–Ω–æ—Å—Ç—å: </span>
    <span id="humidity">%HUMIDITY%</span>
    <sup class="units">%</sup>
  </p>
</body>
<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature", true);
  xhttp.send();
}, 10000 ) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("humidity").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/humidity", true);
  xhttp.send();
}, 10000 ) ;
</script>
<footer>
  <span class="dht-labels">–ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ <a href="https://github.com/vladios13/ESP8266_TS" target="_blank">GitHub</a></span>
</footer>
</html>)rawliteral";


String processor(const String& var) {
  //Serial.println(var);
  if (var == "TEMPERATURE") {
    return String(t);
  } else if (var == "HUMIDITY") {
    return String(h);
  }
  return String();
}

// –°–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –∫–æ–º–∞–Ω–¥—ã: /t, /time.
void newMsg(FB_msg& msg) {
  if (msg.text == "/t") {
    int t = dht.readTemperature();
    int h = dht.readHumidity();
    String readDHT = "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n";
    readDHT = "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ";
    readDHT += int(t);
    readDHT += "¬∞C\n";
    readDHT += "üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: ";
    readDHT += int(h);
    readDHT += "%\n";

    Serial.print(msg.username);
    bot.sendMessage(readDHT, msg.chatID);
  } else if (msg.text == "/time") {
    unsigned long currentTime = millis();
    unsigned long uptime = currentTime - startTime;
    int seconds = uptime / 1000;
    int minutes = seconds / 60;
    int hours = minutes / 60;

    String uptimeMsg = "‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ";
    uptimeMsg += hours;
    uptimeMsg += " —á–∞—Å–æ–≤, ";
    uptimeMsg += minutes % 60;
    uptimeMsg += " –º–∏–Ω—É—Ç, ";
    uptimeMsg += seconds % 60;
    uptimeMsg += " —Å–µ–∫—É–Ω–¥.";

    bot.sendMessage(uptimeMsg, msg.chatID);
  }

  Serial.println(msg.toString());
}

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä—É—Ä–∞
void criticalTemp() {
  if (!isCriticalMessageSent && millis() - temp_lasttime > TEMP_MTBS) {
    if (temp >= maxTemp) {
      String crit_temp = "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temp) + "¬∞C!";
      bot.sendMessage(crit_temp);
      isCriticalMessageSent = true;
      lastCriticalMessageTime = millis();
    }
    temp_lasttime = millis();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞).
  if (isCriticalMessageSent && millis() - lastCriticalMessageTime > CRITICAL_MESSAGE_INTERVAL) {
    isCriticalMessageSent = false;
  }
}

void setupDHT() {
  pinMode(config.DHTPin, INPUT);
  dht.begin();
}

void setupWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(config.ssid, config.password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("WiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void setupBot() {
  bot.setChatID("1111111,2222222");  // ID-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–ø—Ä–∞–≤–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞.
  bot.attach(newMsg);

  bot.sendMessage("üü¢ ONLINE ESP8266");
  Serial.println("Telegram Connected");
}

void setupServer() {
  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    if (!request->authenticate(www_username, www_password))
      return request->requestAuthentication(www_realm, "Authentication failed");

    AsyncWebServerResponse* response = request->beginResponse_P(200, "text/html", index_html, processor);
    response->addHeader("Cache-Control", "max-age=86400");
    request->send_P(200, "text/html", index_html, processor);
  });

  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest* request) {
    if (!request->authenticate(www_username, www_password))
      return request->requestAuthentication(www_realm, "Authentication failed");
    request->send_P(200, "text/plain", String(t).c_str());
  });

  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest* request) {
    if (!request->authenticate(www_username, www_password))
      return request->requestAuthentication(www_realm, "Authentication failed");
    request->send_P(200, "text/plain", String(h).c_str());
  });

  server.onNotFound([](AsyncWebServerRequest* request) {
    request->send(404, "text/plain", "Not Found");
  });

  server.begin();
  Serial.println("HTTP server started");
}

void setup() {
  Serial.begin(115200);
  delay(100);

  setupWiFi();
  setupBot();
  setupServer();
  setupDHT();

  startTime = millis();  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
}

void loop() {
  bot.tick();
  temp = int(t);

  // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –ø—Ä–æ–≤–µ—Ä—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å.
  unsigned long currentMillis = millis();  // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    float newT = dht.readTemperature();
    float newH = dht.readHumidity();

    if (isnan(newT) || isnan(newH)) {
      Serial.println("Failed to read from DHT sensor!");
    } else {
      t = newT;
      h = newH;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
      if (isCriticalMessageSent && t < maxTemp) {
        isCriticalMessageSent = false;
        bot.sendMessage("üü¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤ –Ω–æ—Ä–º—É.");
      }
    }
  }

  criticalTemp();
}
